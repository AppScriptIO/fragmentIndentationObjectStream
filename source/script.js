"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _stream = _interopRequireDefault(require("stream"));var _class, _temp;















const self = (_temp = _class = class FragmentIndentation extends _stream.default.Transform {















  constructor() {
    super({ objectMode: true });
  }

  static TransformToFragmentKeys() {
    return new class extends self {
      constructor() {
        super();
        self.fragmentArray = Array();
      }
      async _transform(file, encoding, callback) {
        if (file.isStream()) return callback(new Error('☕ SZN - fragmentIndentation does not support Buffer/String streams, only object streams that apply the vinyl-fs specification'));
        let contents = file.contents.toString();
        file.contents = await new Buffer(self.replaceIndentationWithFragmentKey(contents));
        await callback(null, file);
      }}();

  }

  static TransformBackToFragment() {
    return new class extends self {
      constructor() {
        super();
      }
      async _transform(file, encoding, callback) {
        if (file.isStream()) return callback(new Error('☕ SZN - fragmentIndentation does not support streams'));
        let contents = file.contents.toString();
        file.contents = await new Buffer(self.replaceOriginalFragment(contents));
        await callback(null, file);
      }}();

  }

  static replaceOriginalFragment(string) {
    for (var fragmentKey in self.fragmentArray) {
      string = string.replace(fragmentKey, self.fragmentArray[fragmentKey]);
    }
    return string;
  }

  static replaceIndentationWithFragmentKey(string) {
    let fragmentArray = [];
    let match = null;
    while (string.lastIndexOf(self.indentation.openning.symbol) >= 0) {
      let startIndex = string.lastIndexOf(self.indentation.openning.symbol);
      let endIndex = string.lastIndexOf(self.indentation.closing.symbol) + self.indentation.closing.length;
      let generatedKey = self.generateKey(7, fragmentArray);
      let insertedString = self.fragmentKey + generatedKey;

      self.fragmentArray[`${insertedString}`] = string.substring(startIndex, endIndex);
      string = self.replaceBetweenIndexes(string, startIndex, endIndex, insertedString);
    }

    return string;
  }

  static generateKey(length, notInArray) {
    let key;
    do {
      key = Math.random().
      toString().
      slice(2, length + 2);
    } while (typeof notInArray[key] != 'undefined');
    return key;
  }

  static replaceBetweenIndexes(string, startIndex, endIndex, insertedString) {
    return string.substring(0, startIndex) + insertedString + string.substring(endIndex);
  }}, _class.indentation = { openning: { regex: /{%/g, symbol: '{%', length: 2 }, closing: { regex: /%}/g, symbol: '%}', length: 2 } }, _class.fragmentKey = 'FRAGMENT', _class.fragmentArray = [], _temp);

























module.exports = {
  FragmentIndentation: self };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,